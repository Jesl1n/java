Given a string, return a new string where the first and last chars have been exchanged.


frontBack("code") → "eodc"
frontBack("a") → "a"
frontBack("ab") → "ba"

public String frontBack(String str) {
   if(str.length()<=1) 
  return str;
  String mid = str.substring(1,str.length()-1);
  return str.charAt(str.length()-1)+mid+str.charAt(0);
}

******************************************************************************************

Given a string, we'll say that the front is the first 3 chars of the string. If the string length is less than 3, the front is whatever is there. Return a new string which is 3 copies of the front.


front3("Java") → "JavJavJav"
front3("Chocolate") → "ChoChoCho"
front3("abc") → "abcabcabc"

public String front3(String str) {
  String values;
if(str.length()>=3)
 values = str.substring(0,3);
 else values = str;
 return values + values + values;
 
}

******************************************************************************************


Given a string, take the last char and return a new string with the last char added at the front and back, so "cat" yields "tcatt". The original string will be length 1 or more.


backAround("cat") → "tcatt"
backAround("Hello") → "oHelloo"
backAround("a") → "aaa"

public String backAround(String str) {
  String last = str.substring(str.length()-1);
  return last + str+last;
}

*****************************************************************************************


Return true if the given non-negative number is a multiple of 3 or a multiple of 5. Use the % "mod" operator -- see Introduction to Mod


or35(3) → true
or35(10) → true
or35(8) → false

public boolean or35(int n) {
 return (n%3==0) || (n%5==0);

}

****************************************************************************************

